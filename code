<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Quadrat Sampling Simulation</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      text-align: center;
    }
    #container {
      position: relative;
      width: 600px;
      height: 600px;
      border: 1px solid #333;
      margin: 0 auto;
      background-color: #eef;
    }
    /* The canvas shows the grid (and, optionally, the population) */
    #grid {
      display: block;
    }
    /* The quadrat overlay (draggable sampling window) */
    #quadrat {
      position: absolute;
      width: 100px;
      height: 100px;
      border: 2px dashed red;
      background-color: rgba(255, 0, 0, 0.2);
      top: 250px;
      left: 250px;
      cursor: move;
    }
    #controls {
      text-align: center;
      margin: 20px;
    }
    #controls button {
      margin: 0 10px;
      padding: 10px 20px;
      font-size: 1em;
    }
    #results {
      max-width: 600px;
      margin: 0 auto;
      border-top: 1px solid #ccc;
      padding-top: 10px;
      font-size: 1.1em;
    }
  </style>
</head>
<body>
  <h1>Quadrat Sampling Simulation</h1>
  <div id="container">
    <canvas id="grid" width="600" height="600"></canvas>
    <div id="quadrat"></div>
  </div>
  <div id="controls">
    <button id="sampleBtn">Take Sample</button>
    <button id="resetBtn">Reset Simulation</button>
    <button id="revealBtn">Reveal Population</button>
  </div>
  <div id="results">
    <p>Latest Sample Count: <span id="sampleCount">0</span></p>
    <p>All Samples: <span id="samplesList"></span></p>
    <p>Average Count: <span id="avgCount">0</span></p>
    <p>Estimated Total Population: <span id="estPop">0</span></p>
  </div>

  <script>
    // Get references to elements
    const canvas = document.getElementById("grid");
    const ctx = canvas.getContext("2d");
    const quadrat = document.getElementById("quadrat");
    const sampleBtn = document.getElementById("sampleBtn");
    const resetBtn = document.getElementById("resetBtn");
    const revealBtn = document.getElementById("revealBtn");
    const sampleCountSpan = document.getElementById("sampleCount");
    const samplesListSpan = document.getElementById("samplesList");
    const avgCountSpan = document.getElementById("avgCount");
    const estPopSpan = document.getElementById("estPop");

    // Dimensions and population settings
    const canvasWidth = canvas.width;
    const canvasHeight = canvas.height;
    const quadratWidth = quadrat.offsetWidth;
    const quadratHeight = quadrat.offsetHeight;
    const truePopulationSize = 200; // hidden true population number

    let populationPoints = [];
    let samples = [];
    let revealPopulation = false;  // population is hidden by default

    // Generate random population points within the canvas
    function generatePopulation() {
      populationPoints = [];
      for (let i = 0; i < truePopulationSize; i++) {
        let x = Math.random() * canvasWidth;
        let y = Math.random() * canvasHeight;
        populationPoints.push({ x, y });
      }
    }

    // Draw the grid and, if enabled, the population points
    function drawGrid() {
      // Clear canvas
      ctx.clearRect(0, 0, canvasWidth, canvasHeight);
      
      // Optionally draw population points (blue circles)
      if (revealPopulation) {
        ctx.fillStyle = "blue";
        populationPoints.forEach(p => {
          ctx.beginPath();
          ctx.arc(p.x, p.y, 3, 0, 2 * Math.PI);
          ctx.fill();
        });
      }
      
      // Draw grid lines (every 50px)
      ctx.strokeStyle = "#ccc";
      for (let x = 0; x <= canvasWidth; x += 50) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvasHeight);
        ctx.stroke();
      }
      for (let y = 0; y <= canvasHeight; y += 50) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvasWidth, y);
        ctx.stroke();
      }
    }

    // Update the results display with the latest sample data
    function updateResults() {
      let sum = samples.reduce((a, b) => a + b, 0);
      let avg = samples.length ? sum / samples.length : 0;
      // Estimated population using: (average count) * (total area / quadrat area)
      let estimatedPopulation = avg * (canvasWidth * canvasHeight) / (quadratWidth * quadratHeight);
      
      sampleCountSpan.textContent = samples[samples.length - 1] || 0;
      samplesListSpan.textContent = samples.join(", ");
      avgCountSpan.textContent = avg.toFixed(2);
      estPopSpan.textContent = Math.round(estimatedPopulation);
    }

    // When the "Take Sample" button is clicked, count individuals in the quadrat
    sampleBtn.addEventListener("click", function() {
      // Get quadrat's position relative to the container
      let rect = quadrat.getBoundingClientRect();
      let containerRect = document.getElementById("container").getBoundingClientRect();
      let qLeft = rect.left - containerRect.left;
      let qTop = rect.top - containerRect.top;

      // Count the population points inside the quadrat boundaries
      let count = populationPoints.filter(p =>
        p.x >= qLeft && p.x <= qLeft + quadratWidth &&
        p.y >= qTop && p.y <= qTop + quadratHeight
      ).length;

      samples.push(count);
      updateResults();
    });

    // Reset simulation: regenerate population, clear samples, hide population points
    resetBtn.addEventListener("click", function() {
      generatePopulation();
      samples = [];
      revealPopulation = false;
      revealBtn.textContent = "Reveal Population";
      updateResults();
      drawGrid();
    });

    // Toggle population reveal (for instructor discussion)
    revealBtn.addEventListener("click", function() {
      revealPopulation = !revealPopulation;
      revealBtn.textContent = revealPopulation ? "Hide Population" : "Reveal Population";
      drawGrid();
    });

    // Draggable quadrat functionality
    let isDragging = false;
    let dragOffsetX = 0;
    let dragOffsetY = 0;

    quadrat.addEventListener("mousedown", function(e) {
      isDragging = true;
      let rect = quadrat.getBoundingClientRect();
      dragOffsetX = e.clientX - rect.left;
      dragOffsetY = e.clientY - rect.top;
    });

    document.addEventListener("mousemove", function(e) {
      if (isDragging) {
        let containerRect = document.getElementById("container").getBoundingClientRect();
        let newLeft = e.clientX - containerRect.left - dragOffsetX;
        let newTop = e.clientY - containerRect.top - dragOffsetY;
        // Constrain within the container boundaries
        newLeft = Math.max(0, Math.min(newLeft, canvasWidth - quadratWidth));
        newTop = Math.max(0, Math.min(newTop, canvasHeight - quadratHeight));
        quadrat.style.left = newLeft + "px";
        quadrat.style.top = newTop + "px";
      }
    });

    document.addEventListener("mouseup", function() {
      isDragging = false;
    });

    // Initialize the simulation when the page loads
    generatePopulation();
    drawGrid();
  </script>
</body>
</html>
